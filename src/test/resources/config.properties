# DataSource properties (not used with H2 embedded database):
db.jdbc.driverclass=org.postgresql.Driver
db.jdbc.url=jdbc:postgresql://localhost:5432/report_server_testdb
db.username=dbtest
db.password=qfree*DBTEST

# Unit/Integration tests can be run using either H2 or PostgreSQL. Uncomment
# The appropriate properties below for the database you want to use and make 
# sure the other properties are commented out:

# Spring properties:
spring.database.vendor=H2
#spring.database.vendor=POSTGRESQL

# Hibernate properties for running tests on H2:
#
# The Hibernate properties
#     hibernate.hbm2ddl.auto
#     hibernate.hbm2ddl.import_files
# are used for PostgreSQL, but not here for H2 because we cannot automatically 
# generate or validate the DB schema when using the H2 database. This is because
# the entity classes contain configuration settings that work with PostgreSQL, 
# but not with H2, e.g.,
#     columnDefinition = "uuid DEFAULT uuid_generate_v4()"
#     columnDefinition = "text"
# The first columnDefinition here is not compatible with H2 because H2 does not 
# have a function named uuid_generate_v4(). The second columnDefinition here is
# not compatible with H2 for a more subtle reason: Although H2 can generate a
# column with the setting 'columnDefinition = "text"', the column that it
# creates is actually given the H2 type "clob". This means that validating the 
# schema via hbm2ddl.auto=validate will fail because Hibernate expects a column 
# of type "text" but it sees, instead, a column of type "clob". This causes
# the validation to fail. Hence, the schema cannot be validated during unit
# testing with the embedded H2 database unless the columnDefinition were set
# to "clob". These problems are avoided if the database schema is created using 
# schema.sql and the test data is inserted using test-data.sql. Those 
# configuration settings are set in PersistenceConfig, not here.
hibernate.dialect=org.hibernate.dialect.H2Dialect
hibernate.show_sql=false

# Hibernate properties for running tests on PostgreSQL:
#
# It does not seem possible to use the Hibernate property setting:
#     hibernate.hbm2ddl.auto=validate
# This may be because the database does not get reset for each test when
# a rollback is performed in the thread that performs the test (the database
# may get modified in another thread, especially for integration tests using
# JAX-RS controllers).
#hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
##hibernate.dialect=com.qfree.bo.report.domain.UuidCustomPostgreSQL9Dialect
#hibernate.show_sql=false
#hibernate.hbm2ddl.auto=create
#hibernate.hbm2ddl.import_files=/db/postgresql/test-data.sql

# Scheduling properties:
schedule.jobprocessor.repeatinterval=300
schedule.jobprocessor.startDelay=30

# Startup options:
startup.sync.reports=false
startup.sync.assets=false
startup.schedule.subscriptions=false
startup.schedule.jobprocessor=false
startup.schedule.jobprocessor.requeue.jobs.running=false
startup.schedule.jobprocessor.requeue.jobs.delivering=false

# Security options:
appsecurity.enable=true
appsecurity.require.https=false
appsecurity.client.authentication.httpbasic=true
appsecurity.client.authentication.x509=false
appsecurity.auto.create.roles=false

# E-mail option defaults (can be overridden by Configuration entities):
mail.sender=report-server@q-free.com
mail.from=donotreply@q-free.com
mail.smtp.host=smtp.q-free.com
mail.smtp.port=25
mail.smtp.auth=false
mail.smtp.auth.username=notused
mail.smtp.auth.password=notused
mail.smtp.starttls.enable=false
mail.smtp.starttls.required=false

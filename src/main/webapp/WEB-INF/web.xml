<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
						http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">

	<display-name>Q-Free Report Server</display-name>


	<!-- Spring: -->

	<!-- This is the bootstrap listener to start up and shut down Spring's root 
		 WebApplicationContext. It creates the Spring container shared by all 
		 servlets and filters.
	-->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	<!-- This is for the old XML configuration. Instead, I use JavaConfig below.
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		    classpath:spring/applicationContext.xml
		</param-value>
	</context-param> -->
	<!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext
		 instead of the default XmlWebApplicationContext. This enables "JavaConfig". -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>
			org.springframework.web.context.support.AnnotationConfigWebApplicationContext
		</param-value>
	</context-param>
	<!-- Configuration location for the root Spring container shared by all servlets
		 and filters. I could also specify a package and all classes within it
		 will be candidates for Spring processing (I think the classes need to be
		 annotated with @Component or a similar stereotype annotation. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			com.qfree.bo.report.ApplicationConfig
		</param-value>
	</context-param>


	<!-- JAX-RS/Jersey ReST server configuration:
	
		 The servlet mapping here appears to be necessary. Although normally it
		 seems that Jersey can automatically locate a class annotated with
		 @javax.ws.rs.ApplicationPath that specifies this mapping, my testing
		 indicates that this can fail if other servlets are registered 
		 elsewhere. If this servlet mapping here is removed, an exception is 
		 thrown when an HTTP request is received that should be mapped to this
		 servlet:
		 	jax-rs java.lang.IllegalStateException: The resource configuration 
		 	is not modifiable in this context
		 	...
	-->
	<servlet>
		<servlet-name>jersey-servlet</servlet-name>
		<servlet-class>
			org.glassfish.jersey.servlet.ServletContainer
		</servlet-class>
		<init-param>
			<param-name>javax.ws.rs.Application</param-name>
			<param-value>com.qfree.bo.report.rest.server.JAXRSConfiguration</param-value>			
		</init-param>		
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>jersey-servlet</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>


	<!-- Start of BIRT Viewer configuration: -->
	
	<context-param>
		<param-name>BIRT_VIEWER_LOG_LEVEL</param-name>
		<param-value>FINEST</param-value>
	</context-param>

	<!-- Report resources directory for preview. Defaults to ${birt home} -->
	<context-param>
		<param-name>BIRT_VIEWER_WORKING_FOLDER</param-name>
		<param-value>reports</param-value>
	</context-param>

	<!-- Flag whether the report resources can be accessed only under the working folder. Defaults to true -->
	<context-param>
		<param-name>WORKING_FOLDER_ACCESS_ONLY</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Settings for how to deal with the url report path. For example, "http://host/repo/test.rptdesign".
		 Following values are supported: 
			<all>		- All paths.
			<domain>	- Only the paths with host matches current domain. 
						  The comparison is literal, "127.0.0.1" and "localhost" are 
						  considered as different hosts. 
			<none>		- URL paths are not supported. 
		 Defaults to "domain". -->
	<context-param>
		<param-name>URL_REPORT_PATH_POLICY</param-name>
		<param-value>domain</param-value>
	</context-param>

	<!-- Defines the BIRT viewer configuration file -->
	<context-param>
		<param-name>BIRT_VIEWER_CONFIG_FILE</param-name>
		<param-value>WEB-INF/viewer.properties</param-value>
	</context-param>

	<!-- Flag whether to allow server-side printing. Possible values are "ON" and "OFF". Defaults to "ON". -->
	<context-param>
		<param-name>BIRT_VIEWER_PRINT_SERVERSIDE</param-name>
		<param-value>ON</param-value>
	</context-param>

	<!-- Flag whether to force browser-optimized HTML output. Defaults to true -->
	<context-param>
		<param-name>HTML_ENABLE_AGENTSTYLE_ENGINE</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Filename generator class/factory to use for the exported reports. -->
	<context-param>
		<param-name>BIRT_FILENAME_GENERATOR_CLASS</param-name>
		<param-value>org.eclipse.birt.report.utility.filename.DefaultFilenameGenerator</param-value>
	</context-param>

	<!-- Viewer Filter used to set the request character encoding to UTF-8. -->
	<filter>
		<filter-name>ViewerFilter</filter-name>
		<filter-class>org.eclipse.birt.report.filter.ViewerFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ViewerFilter</filter-name>
		<servlet-name>ViewerServlet</servlet-name>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ViewerFilter</filter-name>
		<servlet-name>EngineServlet</servlet-name>
	</filter-mapping>

	<!-- Viewer Servlet Context Listener -->
	<listener>
		<listener-class>org.eclipse.birt.report.listener.ViewerServletContextListener</listener-class>
	</listener>

	<!-- Viewer HttpSession Listener -->
	<listener>
		<listener-class>org.eclipse.birt.report.listener.ViewerHttpSessionListener</listener-class>
	</listener>
	<!-- Viewer Servlet, Supports SOAP -->
	<servlet>
		<servlet-name>ViewerServlet</servlet-name>
		<servlet-class>org.eclipse.birt.report.servlet.ViewerServlet</servlet-class>
	</servlet>

	<!-- Engine Servlet -->
	<servlet>
		<servlet-name>EngineServlet</servlet-name>
		<servlet-class>org.eclipse.birt.report.servlet.BirtEngineServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>ViewerServlet</servlet-name>
		<url-pattern>/frameset</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>ViewerServlet</servlet-name>
		<url-pattern>/run</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>EngineServlet</servlet-name>
		<url-pattern>/preview</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>EngineServlet</servlet-name>
		<url-pattern>/download</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>EngineServlet</servlet-name>
		<url-pattern>/parameter</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>EngineServlet</servlet-name>
		<url-pattern>/document</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>EngineServlet</servlet-name>
		<url-pattern>/output</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>EngineServlet</servlet-name>
		<url-pattern>/extract</url-pattern>
	</servlet-mapping>

	<jsp-config>
		<taglib>
			<taglib-uri>/birt.tld</taglib-uri>
			<taglib-location>/WEB-INF/tlds/birt.tld</taglib-location>
		</taglib>
	</jsp-config>

	<!-- End of BIRT Viewer configuration -->


	<!-- Length of time in minutes that a session lasts before the server 
		 invalidates the session and unbinds any of its objects. The default
		 for Tomcat 8 is 30 minutes.
	-->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<!-- The webAppRootKey is a context parameter that exposes the webapp root 
		 as a system property that can be used elsewhere such as in a logging
		 configuration file. For example, in logback.xml it should be possible 
		 to use ${report-server.root} instead of ${catalina.base}. On Tomcat, 
		 it will have a value of ${CATALINA_HOME}/webapp/<webapp-name> .
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>report-server.root</param-value>
	</context-param>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

</web-app>